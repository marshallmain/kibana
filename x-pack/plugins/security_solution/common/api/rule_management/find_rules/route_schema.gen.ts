/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { z } from 'zod';
import * as CommonSchema from '../../common_schema.gen';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator `yarn openapi:generate`.
 */

export const FindRulesSortField = z.enum([
  'created_at',
  'createdAt',
  'enabled',
  'execution_summary.last_execution.date',
  'execution_summary.last_execution.metrics.execution_gap_duration_s',
  'execution_summary.last_execution.metrics.total_indexing_duration_ms',
  'execution_summary.last_execution.metrics.total_search_duration_ms',
  'execution_summary.last_execution.status',
  'name',
  'risk_score',
  'riskScore',
  'severity',
  'updated_at',
  'updatedAt',
]);
export type FindRulesSortField = z.infer<typeof FindRulesSortField>;

export const FindRulesRequestQuery = z.object({
  /**
   * The page number to return.
   */
  page: z.number().optional(),
  /**
   * The number of rules to return per page.
   */
  per_page: z.number().optional(),
  /**
   * Determines which field is used to sort the results.
   */
  sort_field: FindRulesSortField.optional(),
  /**
   * Determines the sort order, which can be `desc` or `asc`.
   */
  sort_order: CommonSchema.SortOrder.optional(),
  /**
   * Filters the returned results according to the value of the specified field, using the `alert.attributes.<field name>:<field value>` syntax.
   */
  filter: z.string().optional(),
  /**
   * An array of fields to include in the results.
   */
  fields: z.array(z.string()).optional(),
});
export type FindRulesRequestQuery = z.infer<typeof FindRulesRequestQuery>;
export type FindRulesRequestQueryInput = z.input<typeof FindRulesRequestQuery>;

export const FindRulesRequestParams = z.undefined();
export type FindRulesRequestParams = z.infer<typeof FindRulesRequestParams>;
export type FindRulesRequestParamsInput = z.input<typeof FindRulesRequestParams>;

export const FindRulesRequestBody = z.undefined();
export type FindRulesRequestBody = z.infer<typeof FindRulesRequestBody>;
export type FindRulesRequestBodyInput = z.input<typeof FindRulesRequestBody>;

export const FindRulesResponse = z.object({
  page: z.number().optional(),
  perPage: z.number().optional(),
  total: z.number().optional(),
});
export type FindRulesResponse = z.infer<typeof FindRulesResponse>;
