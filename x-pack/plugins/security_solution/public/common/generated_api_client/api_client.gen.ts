/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { KibanaServices } from '../lib/kibana';
import type { FindRulesRequestQueryInput } from '../../../common/generated_schema/find_rules/find_rules_request_schema.gen';
import type { FindRulesResponse } from '../../../common/generated_schema/find_rules/find_rules_response_schema.gen';
import type {
  GetRuleExecutionResultsRequestQueryInput,
  GetRuleExecutionResultsRequestParamsInput,
} from '../../../common/generated_schema/get_rule_execution_results/get_rule_execution_results_request_schema.gen';
import type { GetRuleExecutionResultsResponse } from '../../../common/generated_schema/get_rule_execution_results/get_rule_execution_results_response_schema.gen';
import { replaceParams } from './replace_params';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator `yarn openapi:generate`.
 */

/**
 * Retrieves a paginated subset of detection rules. By default, the first page is returned with 20 results per page.
 * @throws An error if response is not OK
 */
export const findRules = async ({ query, signal }: FindRulesProps): Promise<FindRulesResponse> =>
  KibanaServices.get().http.fetch<FindRulesResponse>('/api/detection_engine/rules/_find', {
    method: 'get',
    query,
    signal,
  });

export interface FindRulesProps {
  signal?: AbortSignal;
  query: FindRulesRequestQueryInput;
}

/**
 * Returns execution results of a given rule (aggregated by execution UUID) from Event Log.
 * @throws An error if response is not OK
 */
export const getRuleExecutionResults = async ({
  query,
  params,
  signal,
}: GetRuleExecutionResultsProps): Promise<GetRuleExecutionResultsResponse> =>
  KibanaServices.get().http.fetch<GetRuleExecutionResultsResponse>(
    replaceParams('/internal/detection_engine/rules/{ruleId}/execution/results', params),
    {
      method: 'get',
      query,
      signal,
    }
  );

export interface GetRuleExecutionResultsProps {
  signal?: AbortSignal;
  query: GetRuleExecutionResultsRequestQueryInput;
  params: GetRuleExecutionResultsRequestParamsInput;
}
