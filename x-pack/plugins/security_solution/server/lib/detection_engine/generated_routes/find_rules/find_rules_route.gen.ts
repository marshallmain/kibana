/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import moment from 'moment';
import {
  FindRulesRequestParams,
  FindRulesRequestQuery,
  FindRulesRequestBody,
} from '../../../../../common/generated_schema/find_rules/find_rules_request_schema.gen';
import type { SecuritySolutionPluginRouter } from '../../../../types';
import { findRulesImplementation } from './find_rules_implementation';
import { buildRouteValidationWithZod } from '../../../../utils/build_validation/route_validation';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator `yarn openapi:generate`.
 */

/**
 * Retrieves a paginated subset of detection rules. By default, the first page is returned with 20 results per page.
 * tags: Rules API
 */
export const findRulesRoute = (router: SecuritySolutionPluginRouter) => {
  router.get(
    {
      path: '/api/detection_engine/rules/_find',
      validate: {
        params: buildRouteValidationWithZod(FindRulesRequestParams),
        query: buildRouteValidationWithZod(FindRulesRequestQuery),
        body: buildRouteValidationWithZod(FindRulesRequestBody),
      },
      options: {
        tags: ['access:securitySolution'],
        timeout: {
          // FUNFACT: If we do not add a very long timeout what will happen
          // is that Chrome which receive a 408 error and then do a retry.
          // This retry can cause lots of connections to happen. Using a very
          // long timeout will ensure that Chrome does not do retries and saturate the connections.
          idleSocket: moment.duration('1', 'hour').asMilliseconds(),
        },
      },
    },
    async (context, request, response) => {
      return findRulesImplementation(context, request, response);
    }
  );
};
